@rendermode InteractiveServer

<h3>Calcs</h3>

@code {

    [Parameter]
    public int IndustryCount { get; set; } = 3;
    [Parameter]
    public int[] GeneratorCount { get; set; } = [1, 1, 1];

    [Parameter]
    public BigNum [][]Costs { get; set; } = new BigNum[4][];

    [Parameter]
    public double[][] basicOutputs { get; set; } = new double[4][];
    [Parameter]
    public double[][] basicCommonPowers { get; set; } = new double[4][];
    [Parameter]
    public double[] rarePowers { get; set; } = new double[10];

    bool[] autobuy = new bool[4];

    double[] GetRealRarePowers(string rares, double[] rarePowers)
    {
        double[] res = new double[8];
        for(int i=0; i<rares.Length && i<rarePowers.Length; i++)
        {
            if (rares[i] == '0') res[i] = 1;
            else{
                res[i] = rarePowers[i] * Math.Pow(2, char.GetNumericValue(rares[i]));
            }
        }
        return res;
    }

    double[] GetRealOutput(string commons, double[] basicOutput, double[] basicCommonPowers, double rarePower, double globalProd, double critChance, double critBonus)
    {
        double[] res = new double[8];
        for (int i = 0; i < commons.Length && i<basicCommonPowers.Length; i++)
        {
            if (commons[i] == '0') res[i] = 0;
            else
            {
                res[i] = basicOutput[i]*basicCommonPowers[i] * Math.Pow(2, char.GetNumericValue(commons[i]))*rarePower*globalProd*(critChance*critBonus+1-critChance);
            }
        }       
        return res;
    }
    BigNum[] calcOffline(BigNum[] generators, double[] realOutput, BigNum[] costs, int time, string actions, string buyLimit)
    {
        //rnnlb
        int n = actions.Length-1;
        BigNum[] res = new BigNum[9];
        bool buy = false;

        for (int i = n; i >= 0; i--)
        {
            if (actions[i] == 's') continue;
            else if (actions[i] == 'r' || actions[i] == 'n')
            {
                double tmp = time * 3600 * realOutput[i];
                res[i] = new BigNum(res[i + 1].firstPart * tmp, res[i + 1].secondPart);
                res[i].NormalizeNum();
            }
            else if (actions[i] == 'l')
            {
                double tmp = time * 3600 * realOutput[i];
                res[i] = new BigNum(generators[i].firstPart * tmp, generators[i].secondPart);
                res[i].NormalizeNum();
            }
            else if (actions[i] == 'b')
            {
                buy = true;
            }
            if (actions[i] == 'n' || actions[i] == 'l')
            {
                res[i] = BigNum.AddNums(res[i], generators[i - 1]);
            }
        }
        if (buy)
        {
            res[n] = BigNum.DivideNums(res[0], costs[n - 1]);

            if (buyLimit != "-1")
            {
                BigNum limit = new BigNum(buyLimit);
                res[n] = BigNum.MinNum(res[n], limit);
            }
            res[n] = BigNum.AddNums(res[n], generators[n - 1]);
        }
        else if (n > 0)
        {
            res[n] = generators[n - 1];
        }
        return res;
    }

    void DoCalc(BigNum[] generators, double[] realOutput, BigNum[] costs, int time, string actions, string buyLimit, int industryNum){
        switch (industryNum)
        {
            case 1:
                generators1 = calcOffline(generators, realOutput, costs, time, actions, buyLimit);
                break;
            case 2:
                generators2 = calcOffline(generators, realOutput, costs, time, actions, buyLimit);
                break;
            case 3:
                generators3 = calcOffline(generators, realOutput, costs, time, actions, buyLimit);
                break;
            case 4:
                generators4 = calcOffline(generators, realOutput, costs, time, actions, buyLimit);
                break;
        }   
        return;
    }

    void GenerateActionList(int industryNumber)
    {
        int count = 0;
        switch (industryNumber)
        {
            case 1:
                count = commons1.Length;
                count = Math.Min(count, GeneratorCount[0]);
                actions = "r";
                for (int i = 2; i < count; i++)
                {
                    actions += "n";
                }
                actions += "lb";
                break;
            case 2:
                count = commons2.Length;
                count = Math.Min(count, GeneratorCount[1]);
                actions = "r";
                for (int i = 2; i < count; i++)
                {
                    actions += "n";
                }
                actions += "lb";
                break;
            case 3:
                count = commons3.Length;
                count = Math.Min(count, GeneratorCount[2]);
                actions = "r";
                for (int i = 2; i < count; i++)
                {
                    actions += "n";
                }
                actions += "lb";
                break;
            case 4:
                count = commons4.Length;
                count = Math.Min(count, GeneratorCount[3]);
                actions = "r";
                for (int i = 2; i < count; i++)
                {
                    actions += "n";
                }
                actions += "lb";
                break;
        }
        return;
    }

    private BigNum[] generators1 = new BigNum[9];
    private BigNum[] generators2 = new BigNum[9];
    private BigNum[] generators3 = new BigNum[9];
    private BigNum[] generators4 = new BigNum[9];


    private string commons1 = "";
    private string commons2 = "";
    private string commons3 = "";
    private string commons4 = "";
    private string rares = "";

    private string[] rawGen1 = new string[8];
    private string[] rawGen2 = new string[8];
    private string[] rawGen3 = new string[8];
    private string[] rawGen4 = new string[8];

    private string time = "1";
    private string buyLimit = "-1";
    private string actions = "";

    BigNum[] GetRealGen(string[] rawGen)
    {
        BigNum[] realGen = rawGen.Select(x => new BigNum(x)).ToArray();
        return realGen;
    }

}
<p>Card levels:</p>

<div class="form-group">
    <label for="commons1">1st industry commons:</label>
    <input name="commons1" id="commons1" @bind="commons1"/>
</div>

<div class="form-group">
    <label for="commons2">2nd industry commons:</label>
    <input name="commons2" id="commons2" @bind="commons2" />
</div>

@if (IndustryCount > 2) {
    <div class="form-group">
        <label for="commons3">3rd industry commons:</label>
        <input name="commons3" id="commons3" @bind="commons3" />
    </div>
}
@if (IndustryCount > 3)
{
    <div class="form-group">
        <label for="commons4">4th industry commons:</label>
        <input name="commons4" id="commons4" @bind="commons4" />
    </div>
}
<div class="form-group" style="margin-bottom: 1cm">
    <label for="rares">prod rares:</label>
    <input name="rares" id="rares" @bind="rares" />
</div>





<div>
    <p>First industry generators:</p>
    <label>resource: </label>
    @if (generators1[0] is not null){
        @generators1[0].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t1">i1t1: </label>
    <input name="i1t1" id="i1t1" @bind="rawGen1[0]" />
    <label>i1t1: </label>
    @if (generators1[1] is not null)
    {
        @generators1[1].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t2">i1t2: </label>
    <input name="i1t2" id="i1t2" @bind="rawGen1[1]" />
    <label>i1t2: </label>
    @if (generators1[2] is not null)
    {
        @generators1[2].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t3">i1t3: </label>
    <input name="i1t3" id="i1t3" @bind="rawGen1[2]" />
    <label>i1t3: </label>
    @if (generators1[3] is not null)
    {
        @generators1[3].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t4">i1t4: </label>
    <input name="i1t4" id="i1t4" @bind="rawGen1[3]" />
    <label>i1t4: </label>
    @if (generators1[4] is not null)
    {
        @generators1[4].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t5">i1t5: </label>
    <input name="i1t5" id="i1t5" @bind="rawGen1[4]" />
    <label>i1t5: </label>
    @if (generators1[5] is not null)
    {
        @generators1[5].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i1t6">i1t6: </label>
    <input name="i1t6" id="i1t6" @bind="rawGen1[5]" />
    <label>i1t6: </label>
    @if (generators1[6] is not null)
    {
        @generators1[6].ReverseTranslate()
    }
</div>
@if (GeneratorCount[0] > 6)
{
    <div class="form-group">
        <label for="i1t7">i1t7: </label>
        <input name="i1t7" id="i1t7" @bind="rawGen1[6]" />
        <label>i1t7: </label>
        @if (generators1[7] is not null)
        {
            @generators1[7].ReverseTranslate()
        }
    </div>
    @if(GeneratorCount[0]> 7)
    {
        <div class="form-group">
            <label for="i1t8">i1t8: </label>
            <input name="i1t8" id="i1t8" @bind="rawGen1[7]" />
            <label>i1t8: </label>
            @if (generators1[8] is not null)
            {
                @generators1[8].ReverseTranslate()
            }
        </div>
    }
    
}
<div style="margin-bottom: 1cm">
    <label for="autobuy1">Autobuy bottom?</label>
    <input name="autobuy1" type="checkbox" @bind="autobuy[0]" />
    <button @onclick="() => GenerateActionList(1)">Generate ActionList</button>
    <button @onclick="() => DoCalc(GetRealGen(rawGen1),GetRealOutput(commons1,basicOutputs[0],basicCommonPowers[0],GetRealRarePowers(rares,rarePowers)[0],1,0,0),Costs[0],int.Parse(time),actions,buyLimit,1)">Calc Industry1 </button>
</div>


<div>
    <p>Second industry generators:</p>
    <label>resource: </label>
    @if (generators2[0] is not null)
    {
        @generators2[0].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i2t1">i2t1: </label>
    <input name="i2t1" id="i2t1" @bind="rawGen2[0]" />
    <label>i2t1: </label>
    @if (generators2[1] is not null)
    {
        @generators2[1].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i2t2">i2t2: </label>
    <input name="i2t2" id="i2t2" @bind="rawGen2[1]" />
    <label>i2t2: </label>
    @if (generators2[2] is not null)
    {
        @generators2[2].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i2t3">i2t3: </label>
    <input name="i2t3" id="i2t3" @bind="rawGen2[2]" />
    <label>i2t3: </label>
    @if (generators2[3] is not null)
    {
        @generators2[3].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i2t4">i2t4: </label>
    <input name="i2t4" id="i2t4" @bind="rawGen2[3]" />
    <label>i2t4: </label>
    @if (generators2[4] is not null)
    {
        @generators2[4].ReverseTranslate()
    }
</div>
<div class="form-group">
    <label for="i2t5">i2t5: </label>
    <input name="i2t5" id="i2t5" @bind="rawGen2[4]" />
    <label>i2t5: </label>
    @if (generators2[5] is not null)
    {
        @generators2[5].ReverseTranslate()
    }
</div>
@if (GeneratorCount[1] > 5)
{
    <div class="form-group">
        <label for="i2t6">i2t6: </label>
        <input name="i2t6" id="i2t6" @bind="rawGen2[5]" />
        <label>i2t6: </label>
        @if (generators2[6] is not null)
        {
            @generators2[6].ReverseTranslate()
        }
    </div>
    @if (GeneratorCount[1] > 6)
    {
        <div class="form-group">
            <label for="i2t7">i2t7: </label>
            <input name="i2t7" id="i2t7" @bind="rawGen2[6]" />
            <label>i2t7: </label>
            @if (generators2[7] is not null)
            {
                @generators2[7].ReverseTranslate()
            }
        </div>
        @if (GeneratorCount[1] > 7)
        {
            <div class="form-group">
                <label for="i2t8">i2t8: </label>
                <input name="i2t8" id="i2t8" @bind="rawGen2[7]" />
                <label>i2t8: </label>
                @if (generators2[8] is not null)
                {
                    @generators2[8].ReverseTranslate()
                }
            </div>
        }
    }
}

<div style="margin-bottom: 1cm">
    <label for="autobuy2">Autobuy bottom?</label>
    <input name="autobuy2" type="checkbox" @bind="autobuy[1]" />
    <button @onclick="() => GenerateActionList(2)">Generate ActionList</button>
    <button @onclick="() => DoCalc(GetRealGen(rawGen2),GetRealOutput(commons2,basicOutputs[1],basicCommonPowers[1],GetRealRarePowers(rares,rarePowers)[1],1,0,0),Costs[1],int.Parse(time),actions,buyLimit,2)">Calc Industry2</button>
</div>

@if (IndustryCount > 2)
{
    <div>
        <p>Third industry generators:</p>
        <label>resource: </label>
        @if (generators3[0] is not null)
        {
            @generators3[0].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i3t1">i3t1: </label>
        <input name="i3t1" id="i3t1" @bind="rawGen3[0]" />
        <label>i3t1: </label>
        @if (generators3[1] is not null)
        {
            @generators3[1].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i3t2">i3t2: </label>
        <input name="i3t2" id="i3t2" @bind="rawGen3[1]" />
        <label>i3t2: </label>
        @if (generators3[2] is not null)
        {
            @generators3[2].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i3t3">i3t3: </label>
        <input name="i3t3" id="i3t3" @bind="rawGen3[2]" />
        <label>i3t3: </label>
        @if (generators3[3] is not null)
        {
            @generators3[3].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i3t4">i3t4: </label>
        <input name="i3t4" id="i3t4" @bind="rawGen3[3]" />
        <label>i3t4: </label>
        @if (generators3[4] is not null)
        {
            @generators3[4].ReverseTranslate()
        }
    </div>
    @if (GeneratorCount[2] > 4)
    {
        <div class="form-group">
            <label for="i3t5">i3t5: </label>
            <input name="i3t5" id="i3t5" @bind="rawGen3[4]" />
            <label>i3t5: </label>
            @if (generators3[5] is not null)
            {
                @generators3[5].ReverseTranslate()
            }
        </div>
        @if (GeneratorCount[2] > 5)
        {
            <div class="form-group">
                <label for="i3t6">i3t6: </label>
                <input name="i3t6" id="i3t6" @bind="rawGen3[5]" />
                <label>i3t6: </label>
                @if (generators3[6] is not null)
                {
                    @generators3[6].ReverseTranslate()
                }
            </div>
            @if (GeneratorCount[2] > 6)
            {
                <div class="form-group">
                    <label for="i3t7">i3t7: </label>
                    <input name="i3t7" id="i3t7" @bind="rawGen3[6]" />
                    <label>i3t7: </label>
                    @if (generators3[7] is not null)
                    {
                        @generators3[7].ReverseTranslate()
                    }
                </div>
                @if (GeneratorCount[2] > 7)
                {
                    <div class="form-group">
                        <label for="i3t8">i3t8: </label>
                        <input name="i3t8" id="i3t8" @bind="rawGen3[7]" />
                        <label>i3t8: </label>
                        @if (generators3[8] is not null)
                        {
                            @generators3[8].ReverseTranslate()
                        }
                    </div>
                }
            }

        }
    }
    <div style="margin-bottom: 1cm">
        <label for="autobuy3">Autobuy bottom?</label>
        <input name="autobuy3" type="checkbox" @bind="autobuy[2]" />
        <button @onclick="() => GenerateActionList(3)">Generate ActionList</button>
        <button @onclick="() => DoCalc(GetRealGen(rawGen3),GetRealOutput(commons3,basicOutputs[2],basicCommonPowers[2],GetRealRarePowers(rares,rarePowers)[1],1,0,0),Costs[2],int.Parse(time),actions,buyLimit,3)">Calc Industry3 </button>
    </div>
}


@if (IndustryCount > 3)
{
    <div>
        <p>Fourth industry generators:</p>
        <label>resource: </label>
        @if (generators4[0] is not null)
        {
            @generators4[0].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i4t1">i4t1: </label>
        <input name="i4t1" id="i4t1" @bind="rawGen4[0]" />
        <label>i4t1: </label>
        @if (generators4[1] is not null)
        {
            @generators4[1].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i4t2">i4t2: </label>
        <input name="i4t2" id="i4t2" @bind="rawGen4[1]" />
        <label>i4t2: </label>
        @if (generators4[2] is not null)
        {
            @generators4[2].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i4t3">i4t3: </label>
        <input name="i4t3" id="i4t3" @bind="rawGen4[2]" />
        <label>i4t3: </label>
        @if (generators4[3] is not null)
        {
            @generators4[3].ReverseTranslate()
        }
    </div>
    <div class="form-group">
        <label for="i4t4">i4t4: </label>
        <input name="i4t4" id="i4t4" @bind="rawGen4[3]" />
        <label>i4t4: </label>
        @if (generators4[4] is not null)
        {
            @generators4[4].ReverseTranslate()
        }
    </div>
    @if (GeneratorCount[3] > 4)
    {
        <div class="form-group">
            <label for="i4t5">i4t5: </label>
            <input name="i4t5" id="i4t5" @bind="rawGen4[4]" />
            <label>i4t5: </label>
            @if (generators4[5] is not null)
            {
                @generators4[5].ReverseTranslate()
            }
        </div>
        @if (GeneratorCount[3] > 5)
        {
            <div class="form-group">
                <label for="i4t6">i4t6: </label>
                <input name="i4t6" id="i4t6" @bind="rawGen4[5]" />
                <label>i4t6: </label>
                @if (generators4[6] is not null)
                {
                    @generators4[6].ReverseTranslate()
                }
            </div>
            @if (GeneratorCount[3] > 6)
            {
                <div class="form-group">
                    <label for="i4t7">i4t7: </label>
                    <input name="i4t7" id="i4t7" @bind="rawGen4[6]" />
                    <label>i4t7: </label>
                    @if (generators4[7] is not null)
                    {
                        @generators4[7].ReverseTranslate()
                    }
                </div>
                @if (GeneratorCount[3] > 7)
                {
                    <div class="form-group">
                        <label for="i4t8">i4t8: </label>
                        <input name="i4t8" id="i4t8" @bind="rawGen4[7]" />
                        <label>i4t8: </label>
                        @if (generators4[8] is not null)
                        {
                            @generators4[8].ReverseTranslate()
                        }
                    </div>
                }
            }
        }
    }
    <div style="margin-bottom: 1cm">
        <label for="autobuy4">Autobuy bottom?</label>
        <input name="autobuy4" type="checkbox" @bind="autobuy[3]" />
        <button @onclick="() => GenerateActionList(4)">Generate ActionList</button>
        <button @onclick="() => DoCalc(GetRealGen(rawGen4),GetRealOutput(commons4,basicOutputs[3],basicCommonPowers[3],GetRealRarePowers(rares,rarePowers)[3],1,0,0),Costs[3],int.Parse(time),actions,buyLimit,4)">Calc Industry4 </button>
    </div>

}
<p>Global settings: </p>
<div class="form-group">
    <label for="time">time in hours: </label>
    <input name="time" id="time" @bind="time" />
</div>
<div class="form-group">
    <label for="actions">action list: </label>
    <input name="actions" id="actions" @bind="actions" />
</div>
<div class="form-group">
    <label for="buyLimit">buy limit for bottom generator: </label>
    <input name="buyLimit" id="buyLimit" @bind="buyLimit" />
</div>
